%html
  %head
    %title Data Encryption Service - Design Document
    :css
      ol{margin:0;padding:0}.c11{vertical-align:top;width:234pt;border-style:solid;border-color:#b7b7b7;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c27{vertical-align:top;width:468pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c5{padding-left:0pt;text-align:justify;direction:ltr;margin-left:36pt}.c25{color:#222222;font-size:9pt;background-color:#f8f8f8;font-family:"Verdana"}.c13{color:#555555;font-size:10pt;background-color:#ffffff}.c4{font-size:10pt;background-color:#ffffff;font-family:"Courier New"}.c28{color:#1155cc;font-size:10pt;text-decoration:underline}.c37{list-style-type:disc;margin:0;padding:0}.c7{color:inherit;text-decoration:inherit}.c1{line-height:1.0;direction:ltr}.c39{color:#1155cc;text-decoration:underline}.c0{height:11pt;direction:ltr}.c6{font-size:12pt;font-weight:bold}.c20{margin:5px;border:1px solid black}.c19{text-indent:36pt;margin-left:36pt}.c3{font-size:10pt;font-weight:bold}.c12{color:#434343;font-size:10pt}.c22{font-size:10pt;font-style:italic}.c40{max-width:468pt;padding:72pt 72pt 72pt 72pt}.c24{border-collapse:collapse}.c21{font-size:14pt}.c33{color:#434343}.c16{font-weight:bold}.c14{height:0pt}.c17{background-color:#f3f3f3}.c10{background-color:#d9d9d9}.c26{height:12pt}.c30{font-size:10pt}.c32{background-color:#ffffff}.c2{text-align:center}.c34{color:#666666}.c15{height:14pt}.c31{font-size:8pt}.c41{height:36pt}.c35{font-style:italic}.c29{margin-left:36pt}.c38{font-size:18pt}.c9{font-family:"Courier New"}.c8{direction:ltr}.c18{text-align:justify}.c23{font-size:12pt}.c36{height:11pt}.title{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:36pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}.subtitle{padding-top:18pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:24pt;font-family:"Georgia";padding-bottom:4pt}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:18pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;line-height:1.15;text-align:left;color:#000000;font-size:14pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;line-height:1.15;text-align:left;color:#666666;font-size:12pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:11pt;font-family:"Arial";padding-bottom:2pt}h5{padding-top:11pt;line-height:1.15;text-align:left;color:#666666;font-size:10pt;font-family:"Arial";font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:10pt;font-family:"Arial";padding-bottom:2pt}  %body.c32.c40
    %p.c2.c8
      %span.c21.c16 Design Document
    %p.c2.c8
      %span.c22 CMPE297
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c16.c21
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c2.c8
      %span.c16.c38 Data Encryption Service
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0.c2
      %span.c21.c16
    %p.c0
      %span.c21.c16
    %p.c2.c8
      %span.c35.c23 Jesse Jackson, Marcel Kutsch
    %p.c0.c2
      %span.c6
    %p.c0
      %span.c6
    %p.c2.c8
      %span.c6 GitHub:
      %span.c23 &nbsp;
      %span.c35.c23.c39
        %a.c7{:href => "https://github.com/kutschm/DES.git"} https://github.com/kutschm/DES.git
    %p.c0
      %span.c23
    %p.c8
      %span.c16.c38 Architecture Diagram
    %p.c0
      %span.c16.c38
    %p.c8
      %img{:height => "505", :src => "images/image00.png", :width => "673"}/
    %h3.c8.c18
      %a{:name => "h.n0uw7t3zcxy4"}
      %span The architectural picture above highlights all major components in our Data Encryption Service. The server part consists of a Sinatra web server configured to use SSL for secure data connections. This server can will also be deployed on the Cloud Foundry platform. The web-server hosts 4 RESTful web-services implemented in RUBY, two for encryption and two for decryption. They are meant to be used as pairs as illustrated in the use case description below. Two internal modules will be deployed that handle input validation as well as the actual data encryption / decryption services. The web-services furthermore persist data in a MongoDB collection in BSON format. This collection associates server computed storageKeys with encrypted user data. The encryption is performed using a user provided symmetrical key, which is not stored on the server therefore only the user him/herself can decrypt the data under the assumption he/she provides the correct passphrase. The symmetric key cipher used is AES.
    %p.c0
      %span
    %h3.c8
      %a{:name => "h.1wot4mb7am33"}
      %span Use case:
      %span &nbsp;blob/store - blob/read
    %ol.c37{:start => "1"}
      %li.c5
        %span The client calls the
        %span.c39
          %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/store
        %span &nbsp;web-service and using a JSON document as payload containing the encryption passphrase, the data to be encrypted and an optional validation regex.
      %li.c5
        %span The web-service first verifies the plain-text data against the validation-regex.
      %li.c5
        %span Once validated, the webservice encrypts the data using the given passphrase
      %li.c5
        %span It then generates a unique storageKey and stores the encrypted data as BSON in the MongoDB collection.
      %li.c5
        %span Finally the web-service returns a JSON document containing the storage key.
      %li.c5
        %span This storage key can then be used for an ensuing web-service call to
        %span.c39
          %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/read
        %span
          %a.c7{:href => "https://jmdes.com/encrypt/store"} .
        %span &nbsp;
        %span along with the passphrase to get the plain text back from the server.
    %h3.c8.c18.c26
      %a{:name => "h.ue3m5yqy0mmq"}
    %h3.c26.c8.c18
      %a{:name => "h.6i9lgrv246ub"}
    %h3.c26.c8.c18
      %a{:name => "h.mki1bp5d0x1y"}
    %h3.c8.c18
      %a{:name => "h.fmd3h1kibj03"}
      %span.c34.c23 Use case:
      %span.c6.c34 &nbsp;
      %span blob
      %span.c6.c34 /
      %span retrieve - blob/send
    %ol.c37{:start => "1"}
      %li.c5
        %span The client calls the
        %span.c39
          %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/retrieve
        %span &nbsp;web-service and using a JSON document as payload containing the encryption passphrase, the data to be encrypted and an optional validation regex.
      %li.c5
        %span The web-service first verifies the plain-text data against the validation-regex.
      %li.c5
        %span Once validated, the webservice encrypts the data using the given passphrase
      %li.c5
        %span Finally the web-service returns a JSON document containing the encrypted data. The data is not stored in MongoDB.
      %li.c5
        %span In an ensuing web-service call to
        %span.c39
          %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/send
        %span &nbsp;
        %span along with the passphrase, a client can ask the server to decrypt the previously retrieved encrypted data. The web-service here will return the decrypted data.
    %p.c0.c18
      %span
    %p.c0.c18
      %span
    %p.c0.c18
      %span
    %p.c0.c18
      %span
    %p.c0.c18
      %span
    %p.c0.c18
      %span
    %p.c8.c18
      %span All services involved in these two use-cases can be operated in batch mode, i.e. multiple json records can be added to the single document passed as input to the web-service. All of these will be processed within one web-service call.
    %h1.c8
      %a{:name => "h.9e2bxa1pqg3c"}
      %span Data Encryption Service Rest - API
    %h2.c8
      %a{:name => "h.v0adunnvv198"}
      %span.c10 P
      %span.c10 OST blob/store
    %p.c8
      %span.c12.c32 Allow a consumer to encrypt sensitive data and store in the secure data store system
    %p.c8
      %span.c13 It is strongly recommended you use HTTPS for all OAuth authorization steps.
    %p.c0
      %span.c6
    %p.c8
      %span.c21.c16 Resource URL:
    %p.c8
      %span.c28
        %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/store
    %p.c0
      %span.c23
    %p.c8
      %span.c21.c16 Parameters:
    %p.c8
      %span.c23 IN -
      %span.c22 JSON array containing a single record with the followng keys / value pairs
    %a{:href => "#", :name => "827aee58dac7919bca881914077c9831ba148af9"}
    %a{:href => "#", :name => "0"}
    %table.c24{:cellpadding => "0", :cellspacing => "0"}
      %tbody
        %tr
          %td.c11
            %p.c8
              %span.c3 passPhrase
            %p.c8
              %span.c12 required
          %td.c11
            %p.c1
              %span.c12 A UTF8 string that represent the encryption passphrase used by the encryption service
        %tr
          %td.c11
            %p.c8
              %span.c3 blob
            %p.c8
              %span.c12 required
          %td.c11
            %p.c1
              %span.c12 A UTF8 string representation of the data optionally in base64 encoding to be encrypted and stored
        %tr
          %td.c11
            %p.c1
              %span.c3.c33 validationRegex
            %p.c1
              %span.c12 optional
          %td.c11
            %p.c1
              %span.c12 A regex in UTF8 string representation that is validated against the plain text input text.
    %p.c0
      %span.c6
    %p.c8
      %span.c23 OUT-
      %span.c22 JSON array containing a single record each with &nbsp;the followng keys / value pairs
    %a{:href => "#", :name => "0922860d9debda523acce99d1e9153dd0c969bc3"}
    %a{:href => "#", :name => "1"}
    %table.c24{:cellpadding => "0", :cellspacing => "0"}
      %tbody
        %tr.c14
          %td.c11
            %p.c8
              %span.c3 storageKey
          %td.c11
            %p.c1
              %span.c12 A UTF8 string that represent a unique identifier of the store encrypted data.
            %p.c1
              %span.c12 Only if returnCode = 200
        %tr
          %td.c11
            %p.c1
              %span.c3 returnCode
          %td.c11
            %p.c1
              %span.c12 200 - OK ( API call successful)
            %p.c1
              %span.c12 500 - Error
        %tr
          %td.c11
            %p.c1
              %span.c3 returnMessage
          %td.c11
            %p.c1
              %span.c12 A UTF8 string that contains an error message in case returnCode &gt; 200
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c0
      %span.c6
    %p.c8
      %span.c6 Example Request
    %p.c8
      %span.c13.c16 POST
      %span.c13 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://jmdes.com/blob/store
    %p.c8
      %span.c13.c16 POST Data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      %span.c13 Format JSON
    %a{:href => "#", :name => "0e6e2a894f6d95fa28c218b8b8f57daa93a029ed"}
    %a{:href => "#", :name => "2"}
    %table.c24{:cellpadding => "0", :cellspacing => "0"}
      %tbody
        %tr
          %td.c27.c17
            %p.c29.c8
              %span.c12.c17.c9 [{ &nbsp; &nbsp;passPhrase: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;secretKey&rdquo;,
            %p.c19.c8
              %span.c12.c17.c9 blob: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;text-to-encrypt&rdquo;,
            %p.c19.c8
              %span.c12.c17.c9 validationRegex: &nbsp;&ldquo;
              %span.c17.c9.c31 ^\d{3}-\d{2}-\d{4}$
              %span.c12.c17.c9 &rdquo;
            %p.c29.c8
              %span.c12.c17.c9 }...]
    %p.c0
      %span.c25
    %p.c0
      %span.c13.c16
    %p.c8
      %span.c13.c16 Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      %span.c13 Format JSON
    %a{:href => "#", :name => "2e5d811a7f77cc7bbe24badc88461cf4d8b54810"}
    %a{:href => "#", :name => "3"}
    %table.c24{:cellpadding => "0", :cellspacing => "0"}
      %tbody
        %tr.c14
          %td.c17.c27
            %p.c29.c8
              %span.c12.c17.c9 [{ &nbsp; &nbsp;storageKey: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;uniqueStorageID&rdquo;,
            %p.c19.c8
              %span.c12.c17.c9 returnCode: &nbsp; &nbsp; &nbsp; 200,
            %p.c19.c8
              %span.c12.c17.c9 returnMessage: &nbsp; &nbsp;&ldquo;&rdquo; &nbsp;
            %p.c29.c8
              %span.c12.c17.c9 }...]
    %h2.c15.c8
      %a{:name => "h.ja8zx6lgh8mm"}
    %hr{:style => "page-break-before:always;display:none;"}
      %h2.c15.c8
        %a{:name => "h.r1g60kppuwhh"}
      %h2.c15.c8
        %a{:name => "h.t6y3rd4s3dt2"}
      %h2.c8
        %a{:name => "h.x0l0pwtsac7t"}
        %span.c10 POST blob/retrieve
      %p.c8
        %span.c12.c32 Allow a consumer to encrypt sensitive data and retrieve the encrypted data without storing it in the system
      %p.c8
        %span.c13 It is strongly recommended you use HTTPS for all OAuth authorization steps.
      %p.c0
        %span.c6
      %p.c8
        %span.c21.c16 Resource URL:
      %p.c8
        %span.c28
          %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blobl/retrieve
      %p.c0
        %span.c23
      %p.c8
        %span.c23 IN -
        %span.c22 JSON array containing a single record with the followng keys / value pairs
      %a{:href => "#", :name => "827aee58dac7919bca881914077c9831ba148af9"}
      %a{:href => "#", :name => "4"}
      %table.c24{:cellpadding => "0", :cellspacing => "0"}
        %tbody
          %tr.c14
            %td.c11
              %p.c8
                %span.c3 passPhrase
              %p.c8
                %span.c12 required
            %td.c11
              %p.c1
                %span.c12 A UTF8 string that represent the encryption passphrase used by the encryption service
          %tr.c14
            %td.c11
              %p.c8
                %span.c3 blob
              %p.c8
                %span.c12 required
            %td.c11
              %p.c1
                %span.c12 A UTF8 string representation of the data optionally in base64 encoding to be encrypted and stored
          %tr
            %td.c11
              %p.c1
                %span.c3 validationRegex
              %p.c1
                %span.c12 optional
            %td.c11
              %p.c1
                %span.c12 A regex in UTF8 string representation that is validated against the plain text input text.
      %p.c0
        %span.c6
      %p.c8
        %span.c23 OUT -
        %span.c22 JSON array containing a single record each with &nbsp;the followng keys / value pairs
      %a{:href => "#", :name => "81725f38b1c3c369ad82faaa9b5851a13600f585"}
      %a{:href => "#", :name => "5"}
      %table.c24{:cellpadding => "0", :cellspacing => "0"}
        %tbody
          %tr.c14
            %td.c11
              %p.c8
                %span.c3 encryptedBlob
            %td.c11
              %p.c1
                %span.c12 A UTF8 string that contains the encrypted text
              %p.c1
                %span.c12 Only if returnCode = 0
          %tr
            %td.c11
              %p.c1
                %span.c3 returnCode
            %td.c11
              %p.c1
                %span.c12 200 - OK
              %p.c1
                %span.c12 500 - Error
          %tr
            %td.c11
              %p.c1
                %span.c3 returnMessage
            %td.c11
              %p.c1
                %span.c12 A UTF8 string that contains an error message in case returnCode &gt; 200
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c0
        %span.c6
      %p.c8
        %span.c6 Example Request
      %p.c8
        %span.c13.c16 POST
        %span.c13 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://jmdes.com/blob/retrieve
      %p.c8
        %span.c13.c16 POST Data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        %span.c13 Format JSON
      %p.c0
        %span.c25
      %a{:href => "#", :name => "48fa33c6089612370f82e28cb66ce0b959dfcd48"}
      %a{:href => "#", :name => "6"}
      %table.c24{:cellpadding => "0", :cellspacing => "0"}
        %tbody
          %tr.c14
            %td.c27.c17
              %p.c29.c8
                %span.c12.c9.c17 [{
              %p.c19.c8
                %span.c12.c17.c9 passPhrase: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;secretKey&rdquo;,
              %p.c19.c8
                %span.c12.c17.c9 blob: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;text-to-encrypt&rdquo;,
              %p.c19.c8
                %span.c12.c17.c9 validationRegex: &nbsp;&ldquo;
                %span.c17.c31.c9 ^\d{3}-\d{2}-\d{4}$
                %span.c12.c17.c9 &rdquo;
              %p.c29.c8
                %span.c12.c17.c9 }...]
      %p.c0
        %span.c25
      %p.c0
        %span.c25
      %p.c8
        %span.c13.c16 Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        %span.c13 Format JSON
      %a{:href => "#", :name => "05e3cf5b33067b9835799bbdeaae7bf432ab94b2"}
      %a{:href => "#", :name => "7"}
      %table.c24{:cellpadding => "0", :cellspacing => "0"}
        %tbody
          %tr.c14
            %td.c27.c17
              %p.c29.c8
                %span.c12.c17.c9 [{
              %p.c19.c8
                %span.c12.c17.c9 encryptedBlob: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;encryptedBlob&rdquo;,
              %p.c19.c8
                %span.c12.c17.c9 returnCode: &nbsp; &nbsp; &nbsp; 200,
              %p.c19.c8
                %span.c12.c17.c9 returnMessage: &nbsp; &nbsp;&ldquo;&rdquo;
              %p.c29.c8
                %span.c12.c17.c9 }...]
      %h2.c15.c8
        %a{:name => "h.fe8shya2kvc4"}
      %hr{:style => "page-break-before:always;display:none;"}
        %h2.c15.c8
          %a{:name => "h.h06bn2w6nba8"}
        %h2.c8
          %a{:name => "h.wky47rdizvk0"}
          %span.c10 P
          %span.c10 OST blob/read
        %p.c8
          %span.c12.c32 Allow a consumer to retrieve records from the encrypted data store individually the web service returns them decrypted in plain text UTF8 back to the user.
        %p.c8
          %span.c13 It is strongly recommended you use HTTPS for all OAuth authorization steps.
        %p.c0
          %span.c6
        %p.c8
          %span.c21.c16 Resource URL:
        %p.c8
          %span.c28
            %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/read
        %p.c0
          %span.c23
        %p.c8
          %span.c21.c16 Parameters:
        %p.c8
          %span.c23 IN -
          %span.c22 JSON array containing records with the followng keys / value pairs
        %a{:href => "#", :name => "1ca52666f57d728ae805bb7580dae8f4cdff3b32"}
        %a{:href => "#", :name => "8"}
        %table.c24{:cellpadding => "0", :cellspacing => "0"}
          %tbody
            %tr.c14
              %td.c11
                %p.c8
                  %span.c3 passPhrase
                %p.c8
                  %span.c12 required
              %td.c11
                %p.c1
                  %span.c12 A UTF8 string that represent the encryption passphrase used by the encryption service
            %tr.c14
              %td.c11
                %p.c8
                  %span.c3 storageKey
                %p.c8
                  %span.c12 required
              %td.c11
                %p.c1
                  %span.c12 A UTF8 string that represent a unique identifier of the store encrypted data.
        %p.c0
          %span.c6
        %p.c8
          %span.c23 OUT -
          %span.c22 JSON array containing records each with &nbsp;the followng keys / value pairs
        %a{:href => "#", :name => "46fe1ac74d9e337aab0eb8db2c00851769c936c1"}
        %a{:href => "#", :name => "9"}
        %table.c24{:cellpadding => "0", :cellspacing => "0"}
          %tbody
            %tr.c14
              %td.c11
                %p.c8
                  %span.c3 storageKey
                %p.c1.c36
                  %span.c3
              %td.c11
                %p.c1
                  %span.c12 A UTF8 string representing the unique identifier of an encrypted string returned by an encrypt/store call
            %tr.c14
              %td.c11
                %p.c8
                  %span.c3 blob
              %td.c11
                %p.c1
                  %span.c12 A UTF8 string that contains the decrypted plain text of the encrypted text contained in the data store. Only returned if returnCode = 0
            %tr
              %td.c11
                %p.c1
                  %span.c3 returnCode
              %td.c11
                %p.c1
                  %span.c12 200 - OK
                %p.c1
                  %span.c12 500 - Error
            %tr
              %td.c11
                %p.c1
                  %span.c3 returnMessage
              %td.c11
                %p.c1
                  %span.c12 A UTF8 string that contains an error message in case returnCode &gt; 2000
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c0
          %span.c6
        %p.c8
          %span.c6 Example Request
        %p.c8
          %span.c13.c16 POST
          %span.c13 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://jmdes.com/blob/read
        %p.c8
          %span.c13.c16 POST Data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          %span.c13 Format JSON
        %a{:href => "#", :name => "44634bfa2d0e9c356f851c9107e3b968f4ab4df4"}
        %a{:href => "#", :name => "10"}
        %table.c24{:cellpadding => "0", :cellspacing => "0"}
          %tbody
            %tr.c14
              %td.c27.c17
                %p.c8.c29
                  %span.c12.c17.c9 [{
                %p.c19.c8
                  %span.c12.c17.c9 passPhrase: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;secretKey&rdquo;,
                %p.c8.c19
                  %span.c12.c17.c9 storageKey: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;uniqueStorageID&rdquo;
                %p.c29.c8
                  %span.c12.c17.c9 }...]
        %p.c0
          %span.c25
        %p.c0
          %span.c25
        %p.c8
          %span.c13.c16 Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          %span.c13 Format JSON
        %a{:href => "#", :name => "a48a367c132766ed2740717b809d28e4654ca5cb"}
        %a{:href => "#", :name => "11"}
        %table.c24{:cellpadding => "0", :cellspacing => "0"}
          %tbody
            %tr.c14
              %td.c27.c17
                %p.c29.c8
                  %span.c12.c17.c9 [{
                %p.c19.c8
                  %span.c12.c17.c9 storageKey: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;uniqueStorageID&rdquo;
                %p.c19.c8
                  %span.c12.c17.c9 blob: &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;original_text&rdquo;,
                %p.c19.c8
                  %span.c12.c17.c9 returnCode: &nbsp; &nbsp; &nbsp; 200,
                %p.c19.c8
                  %span.c12.c17.c9 returnMessage: &nbsp; &nbsp;&ldquo;&rdquo;
                %p.c29.c8
                  %span.c12.c17.c9 }...]
        %h2.c15.c8
          %a{:name => "h.jz4g5el8244k"}
        %hr{:style => "page-break-before:always;display:none;"}
          %h2.c8.c15
            %a{:name => "h.kjkdxnjkazks"}
          %h2.c8
            %a{:name => "h.vwtus32sio1k"}
            %span.c10 POST blob/send
          %p.c8
            %span.c12.c32 Allow a consumer to retrieve multiple encrypted records as a batch and decrypt them back to a plain text.
          %p.c8
            %span.c13 It is strongly recommended you use HTTPS for all OAuth authorization steps.
          %p.c0
            %span.c6
          %p.c8
            %span.c21.c16 Resource URL:
          %p.c8
            %span.c28
              %a.c7{:href => "https://jmdes.com/encrypt/store"} https://jmdes.com/blob/send
          %p.c0
            %span.c23
          %p.c8
            %span.c21.c16 Parameters:
          %p.c8
            %span.c23 IN -
            %span.c30 JSON array of records each containing the followng keys / value pairs
          %a{:href => "#", :name => "5e3cc844d8b007229ef472b051d7cab36a231b6c"}
          %a{:href => "#", :name => "12"}
          %table.c24{:cellpadding => "0", :cellspacing => "0"}
            %tbody
              %tr.c41
                %td.c11
                  %p.c8
                    %span.c3 passhrase
                  %p.c8
                    %span.c12 required
                %td.c11
                  %p.c1
                    %span.c12 A UTF8 string that represent the encryption passphrase used by the encryption service
              %tr.c14
                %td.c11
                  %p.c8
                    %span.c3 encryptedBlob
                %td.c11
                  %p.c1
                    %span.c12 A UTF8 string that contains the encrypted text
          %p.c0
            %span.c6
          %p.c8
            %span.c23 OUT -
            %span.c30 JSON array of records each containing the followng keys
          %a{:href => "#", :name => "527916b5a8c11fec71cd4e514353b96b6e99596b"}
          %a{:href => "#", :name => "13"}
          %table.c24{:cellpadding => "0", :cellspacing => "0"}
            %tbody
              %tr
                %td.c11
                  %p.c1
                    %span.c3 blob
                %td.c11
                  %p.c1
                    %span.c12 A UTF8 string that contains the decrypted plain text of the encrypted text. Only returned if returnCode =200
              %tr
                %td.c11
                  %p.c1
                    %span.c3 returnCode
                %td.c11
                  %p.c1
                    %span.c12 200 - OK
                  %p.c1
                    %span.c12 500 - Error
              %tr
                %td.c11
                  %p.c1
                    %span.c3 returnMessage
                %td.c11
                  %p.c1
                    %span.c12 A UTF8 string that contains an error message in case returnCode &gt; 200
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c0
            %span.c6
          %p.c8
            %span.c6 Example Request
          %p.c8
            %span.c13.c16 POST
            %span.c13 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://jmdes.com/blob/send
          %p.c8
            %span.c13.c16 POST Data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            %span.c13 Format JSON
          %a{:href => "#", :name => "706393b2b7124d5c0b174a0fedf1537543b15226"}
          %a{:href => "#", :name => "14"}
          %table.c24{:cellpadding => "0", :cellspacing => "0"}
            %tbody
              %tr.c14
                %td.c27.c17
                  %p.c29.c8
                    %span.c12.c17.c9 [ {
                  %p.c19.c8
                    %span.c12.c17.c9 passphrase: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;secretKey&rdquo;,
                  %p.c19.c8
                    %span.c12.c17.c9 encryptedBlob: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ldquo;encryptedBlob&rdquo;,
                  %p.c29.c8
                    %span.c12.c17.c9 } ... ]
          %p.c0
            %span.c25
          %p.c0
            %span.c25
          %p.c8
            %span.c13.c16 Result&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            %span.c13 Format JSON
          %a{:href => "#", :name => "bd9f2d90a2bf0cfa86f53b358157e86a8f7bc63d"}
          %a{:href => "#", :name => "15"}
          %table.c24{:cellpadding => "0", :cellspacing => "0"}
            %tbody
              %tr.c14
                %td.c27.c17
                  %p.c29.c8
                    %span.c12.c17.c9 [ {
                  %p.c19.c8
                    %span.c12.c17.c9 blob: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &ldquo;original_text&rdquo;,
                  %p.c19.c8
                    %span.c12.c17.c9 returnCode: &nbsp; &nbsp; &nbsp; 200,
                  %p.c19.c8
                    %span.c12.c17.c9 returnMessage: &nbsp; &nbsp;&ldquo;&rdquo;
                  %p.c29.c8
                    %span.c12.c17.c9 } ... ]
          %h2.c15.c8
            %a{:name => "h.fn8200t7zohz"}
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %p.c0
            %span
          %h1.c8
            %a{:name => "h.syrt3wn4rjey"}
            %span Samples:
          %p.c0
            %span
          %h4.c8.c18
            %a{:name => "h.8v6q2zgj38wf"}
            %span Sample store / read
          %p.c8
            %span.c4 POST blob/store {&quot;passPhrase&quot;:&quot;phrase&quot;,&quot;blob&quot;:&quot;text-to-encrypt&quot;,&quot;validationRegex&quot;:&quot;foo&rdquo;}
          %p.c8
            %span.c4 Result: {&quot;returnCode&quot;:200,&quot;storageKey&quot;:&quot;508786227506a406e4000001&quot;,&quot;returnMessage&quot;:&quot;&quot;}
          %p.c0
            %span.c4
          %p.c8
            %span.c4 POST blob/read {&quot;passPhrase&quot;:&quot;phrase&quot;,&quot;storageKey&quot;:&quot;508786227506a406e4000001&quot;}
          %p.c8
            %span.c4 Result: {&quot;returnCode&quot;:200,&quot;storageKey&quot;:&quot;508786227506a406e4000001&quot;,&quot;returnMessage&quot;:&quot;&quot;,&quot;blob&quot;:&quot;text to encrypt&quot;}
          %p.c0
            %span
          %h4.c8
            %a{:name => "h.53v0b5hab8ph"}
            %span Sample retrieve / send
          %p.c8
            %span.c9 POST blob/retrieve {&quot;passPhrase&quot;:&quot;phrase&quot;,&quot;blob&quot;:&quot;text to encrypt&quot;,&quot;validationRegex&quot;:&quot;foo&quot;}
          %p.c8
            %span.c9 Result: {&quot;returnCode&quot;:200,&quot;returnMessage&quot;:&quot;&quot;,&quot;encryptedBlob&quot;:&quot;Encrypted-text to encrypt&quot;}
          %p.c8
            %span.c9 done... blob/retrieve
          %p.c0
            %span.c9
          %p.c8
            %span.c9 POST blob/send {&quot;passPhrase&quot;:&quot;phrase&quot;,&quot;validationRegex&quot;:&quot;foo&quot;,&quot;encryptedBlob&quot;:&quot;Encrypted-text to encrypt&quot;}
          %p.c8
            %span.c9 Result: {&quot;returnCode&quot;:200,&quot;returnMessage&quot;:&quot;&quot;,&quot;blob&quot;:&quot;text to encrypt&quot;}
          %p.c8
            %span.c9 done... blob/send
          %p.c0
            %span
          %p.c0
            %span
          %p.c1.c36
            %span
          %sup
            %a{:href => "#cmnt1", :name => "cmnt_ref1"} [a]
          .c20
            %p.c1
              %a{:href => "#cmnt_ref1", :name => "cmnt1"} [a]
              %span Marcel Kutsch:
            %p.c1
              %span TODO:
            %p.c1
              %span &nbsp;- Add Return and Reason Codes to output parms
            %p.c1
              %span &nbsp;- Add validation regex to encrypt calls
            %p.c1
              %span &nbsp;- Need drill down views on architecture diag for each api call
